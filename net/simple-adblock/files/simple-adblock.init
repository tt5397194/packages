#!/bin/sh /etc/rc.common
PKG_VERSION=

export START=94
export USE_PROCD=1
export LC_ALL=C

export EXTRA_COMMANDS="check dl killcache status"
export EXTRA_HELP="	check	Checks if specified domain is found in current blacklist
	dl      	Force-redownloads all the lists, even if the last download was successful and no config changes were made
	status    Shows the service last-run status"

readonly packageName="simple-adblock"
readonly serviceName="$packageName $PKG_VERSION"
readonly dnsmasqFile="/var/dnsmasq.d/${packageName}"
readonly compressedCacheFile="/etc/${packageName}.gz"
readonly A_TMP="/var/simple-adblock.hosts.a.tmp"
readonly B_TMP="/var/simple-adblock.hosts.b.tmp"
readonly cacheFile="/var/run/${packageName}.cache"
readonly PIDFile="/var/run/${packageName}.pid"
readonly JsonFile="/var/run/${packageName}.json"
readonly h_filter='/localhost/d;/^#/d;/^[^0-9]/d;s/^0\.0\.0\.0.//;s/^127\.0\.0\.1.//;s/[[:space:]]*#.*$//;s/[[:cntrl:]]$//;s/[[:space:]]//g;/[`~!@#\$%\^&\*()=+;:"'\'',<>?/\|[{}]/d;/]/d;/\./!d;/^$/d;/[^[:alnum:]_.-]/d;'
readonly d_filter='/^#/d;s/[[:space:]]*#.*$//;s/[[:space:]]*$//;s/[[:cntrl:]]$//;/[[:space:]]/d;/[`~!@#\$%\^&\*()=+;:"'\'',<>?/\|[{}]/d;/]/d;/\./!d;/^$/d;/[^[:alnum:]_.-]/d;'
readonly f_filter='s|^|local=/|;s|$|/|'
readonly checkmark='\xe2\x9c\x93'
readonly xmark='\xe2\x9c\x97'
readonly _OK_='\033[0;32m\xe2\x9c\x93\033[0m'
readonly _FAIL_='\033[0;31m\xe2\x9c\x97\033[0m'
readonly __OK__='\033[0;32m[\xe2\x9c\x93]\033[0m'
readonly __FAIL__='\033[0;31m[\xe2\x9c\x97]\033[0m'
readonly _ERROR_='\033[0;31mERROR\033[0m'
readonly statusSuccess='Success'
readonly statusFail='Fail'
readonly statusDownloading='Downloading'
readonly statusReloading='Reloading'
readonly statusRestarting='Restarting'
readonly statusStarting='Starting'
readonly statusForceReloading='Force-Reloading'
readonly statusProcessing='Processing'
readonly statusStopped='Stopped'

create_lock() { [ -e "$PIDFile" ] && return 1; touch "$PIDFile"; }
remove_lock() { [ -e "$PIDFile" ] && rm -f "$PIDFile"; } # rm -f /var/simple-adblock_tmp_* >/dev/null 2>&1; }
trap remove_lock EXIT
output_ok() { case $verbosity in 1) output 1 "$_OK_";; 2) output 2 "$__OK__\\n";; esac; }
output_okn() { case $verbosity in 1) output 1 "$_OK_\\n";; 2) output 2 "$__OK__\\n";; esac; }
output_fail() { case $verbosity in 1) output 1 "$_FAIL_";; 2) output 2 "$__FAIL__\\n";; esac; }
output_failn() { case $verbosity in 1) output 1 "$_FAIL_\\n";; 2) output 2 "$__FAIL__\\n";; esac; }
export logmsg
output() {
# Can take a single parameter (text) to be output at any verbosity
# Or target verbosity level and text to be output at specifc verbosity
	if [ $# -ne 1 ]; then
		if [ ! $((verbosity & $1)) -gt 0 ]; then return 0; else shift; fi
	fi
	[ -t 1 ] && echo -e -n "$1"
	local msg=$(echo -n "${1/$serviceName /service }" | sed 's|\\033\[[0-9]\?;\?[0-9]\?[0-9]\?m||g');
	if [ "$(echo -e -n "$msg" | wc -l)" -gt 0 ]; then
		logger -t "${packageName:-service} [$$]" "$(echo -e -n "${logmsg}${msg}")"
		logmsg=""
	else
		logmsg="${logmsg}${msg}"
	fi
}
led_on(){ if [ -n "${1}" ] && [ -e "${1}/trigger" ]; then echo "default-on" > "${1}/trigger" 2>&1; fi; }
led_off(){ if [ -n "${1}" ] &&  [ -e "${1}/trigger" ]; then echo "none" > "${1}/trigger" 2>&1; fi; }
testCompressedCache(){ [ "$compressedCache" -gt 0 ] && gzip -t -c $compressedCacheFile; }
boot() { load_package_config; ( sleep "$bootDelay" && rc_procd start_service && rc_procd service_triggers | cat & ); }

export serviceEnabled
export forceDNS
export parallelDL
export debug
export allowNonAscii
export compressedCache     
export bootDelay
export dlTimeout
export verbosity
export led
export whitelist_domains
export blacklist_domains
export whitelist_domains_urls
export blacklist_domains_urls
export blacklist_hosts_urls
export wan_if wan_gw wanphysdev dl_command serviceStatus dl_flag
export dlStatus

load_package_config() {
	config_load "$packageName"
	config_get_bool serviceEnabled        "config" "enabled" 1
	config_get_bool forceDNS              "config" "force_dns" 1
	config_get_bool parallelDL            "config" "parallel_downloads" 1
	config_get_bool debug                 "config" "debug" 0
	config_get_bool allowNonAscii         "config" "allow_non_ascii" 0
	config_get_bool compressedCache       "config" "compressed_cache" 0
	config_get bootDelay                  "config" "boot_delay" "120"
	config_get dlTimeout                  "config" "download_timeout" "20"
	config_get verbosity                  "config" "verbosity" "2"
	config_get led        	              "config" "led"
	config_get whitelist_domains          "config" "whitelist_domain"
	config_get blacklist_domains          "config" "blacklist_domain"
	config_get whitelist_domains_urls     "config" "whitelist_domains_url"
	config_get blacklist_domains_urls     "config" "blacklist_domains_url"
	config_get blacklist_hosts_urls       "config" "blacklist_hosts_url"

	if [ -z "${verbosity##*[!0-9]*}" ] || [ "$verbosity" -lt 0 ] || [ "$verbosity" -gt 2 ]; then
		verbosity=1
	fi
	. /lib/functions/network.sh
	. /usr/share/libubox/jshn.sh
	# Prefer curl because it supports the file: scheme.
	if [ -x /usr/bin/curl ] ; then
		dl_command="curl --insecure --connect-timeout $dlTimeout --silent"
		dl_flag="-o"
	else
		dl_command="wget --no-check-certificate --timeout $dlTimeout -q"
		dl_flag="-O"
	fi
	led="${led:+/sys/class/leds/$led}"
}

is_enabled() {
	load_package_config

	if [ "$debug" -ne 0 ]; then
		exec 1>>/tmp/simple-adblock.log
		exec 2>&1
		set -x
	fi

	if [ "$serviceEnabled" -eq 0 ]; then
		if [ "$1" = "on_start" ]; then
			output "$packageName is currently disabled.\\n"
			output "Run the following commands before starting service again:\\n"
			output "uci set $packageName.config.enabled='1'; uci commit;\\n"
		fi
		return 1
	fi
	[ ! -d ${dnsmasqFile%/*} ] && mkdir -p ${dnsmasqFile%/*}
	testCompressedCache && return 0
	network_flush_cache; network_find_wan wan_if; network_get_gateway wan_gw "$wan_if";
	[ -n "$wan_gw" ] && return 0
	output "$_ERROR_: $serviceName failed to discover WAN gateway.\\n"; return 1;
}

dnsmasq_kill() { killall -q -HUP dnsmasq; }
dnsmasq_restart() { /etc/init.d/dnsmasq restart >/dev/null 2>&1; }
reload_dnsmasq() {
	case $1 in
		on_start)
			if [ -s "$dnsmasqFile" ]; then
				output 3 "Restarting DNSMASQ "
				tmpfs set message "restarting DNSMASQ"
				if dnsmasq_restart; then
					tmpfs set status "$statusSuccess"
					led_on "$led"
					output_okn
				else 
					output_failn
					tmpfs set status "$statusFail"
					tmpfs add error "DNSMASQ restart error"
					output "$_ERROR_: $serviceName failed to restart DNSMASQ!\\n"
					return 1
				fi
			else
				tmpfs set status "$statusFail"
				tmpfs add error "Failed to create $dnsmasqFile file."
				output "$_ERROR_: $serviceName failed to create its data file!\\n"
				return 1
			fi
			;;
		on_stop)
			[ -f $dnsmasqFile ] && mv $dnsmasqFile $cacheFile
			output 3 "Restarting dnsmasq "
			if dnsmasq_restart; then
				led_off "$led"
				output_okn
				output "$serviceName stopped.\\n"
				tmpfs set status "$statusStopped"
				tmpfs del message
				tmpfs del error
				return 0
			else
				output_failn;
				tmpfs set status "$statusFail"
				tmpfs add error "DNSMASQ restart error on stop"
				output "$_ERROR_: $serviceName failed to restart DNSMASQ on stop !\\n"
				return 1
			fi
			;;
		quiet | *)
			dnsmasq_restart && return 0 || return 1
			;;
	esac
}

tmpfs(){
	local action="$1" instance="$2" value="$3" 
	local status message error stats 
	local readReload readRestart curReload curRestart ret
	if [ -s "$JsonFile" ]; then
		status="$(jsonfilter -i $JsonFile -l1 -e "@['data']['status']")"
		message="$(jsonfilter -i $JsonFile -l1 -e "@['data']['message']")"
		error="$(jsonfilter -i $JsonFile -l1 -e "@['data']['error']")"
		stats="$(jsonfilter -i $JsonFile -l1 -e "@['data']['stats']")"
		readReload="$(jsonfilter -i $JsonFile -l1 -e "@['data']['reload']")"
		readRestart="$(jsonfilter -i $JsonFile -l1 -e "@['data']['restart']")"
	fi
	case "$action" in
		get)
			case "$instance" in
				status)
					echo "$status"; return;;
				message) 
					echo "$message"; return;;
				error) 
					echo "$error"; return;;
				stats) 
					echo "$stats"; return;;
				triggers)
					curReload="$allowNonAscii $parallelDL $debug $dlTimeout $whitelist_domains $blacklist_domains $whitelist_domains_urls $blacklist_domains_urls $blacklist_hosts_urls"
					curRestart="$compressedCache $forceDNS $led"
					if [ "$curReload" != "$readReload" ]; then
						ret="download"
					elif [ "$curRestart" != "$readRestart" ]; then
						ret="restart"
					fi
					echo "$ret"
					return;;
			esac
			;;
		add)
			case "$instance" in
				status)
					[ -n "$status" ] && status="$status $value" || status="$value";;
				message) 
					[ -n "$message" ] && message="${message} ${value}" || message="$value";;
				error) 
					[ -n "$error" ] && error="$error $value" || error="$value";;
				stats) 
					[ -n "$stats" ] && stats="$stats $value" || stats="$value";;
			esac
			;;
		del)
			case "$instance" in
				status)
					unset status;;
				message) 
					unset message;;
				error) 
					unset error;;
				stats) 
					unset stats;;
				triggers) 
					unset readReload; unset readRestart;;
			esac
			;;
		set)
			case "$instance" in
				status)
					status="$value";;
				message) 
					message="$value";;
				error) 
					error="$value";;
				stats) 
					stats="$value";;
				triggers) 
					readReload="$allowNonAscii $parallelDL $debug $dlTimeout $whitelist_domains $blacklist_domains $whitelist_domains_urls $blacklist_domains_urls $blacklist_hosts_urls"
					readRestart="$compressedCache $forceDNS $led"
					;;
			esac
			;;
	esac
  json_init
  json_add_object "data"
  json_add_string version "$PKG_VERSION"
  json_add_string status "$status"
  json_add_string message "$message"
  json_add_string error "$error"
  json_add_string stats "$stats"
  json_add_string reload "$readReload"
  json_add_string restart "$readRestart"
  json_close_object
  json_dump > "$JsonFile"
	sync
}

is_chaos_calmer() { ubus -S call system board | grep -q "Chaos Calmer"; }

remove_fw3_redirect() {
	local name
	config_get name "$1" "name"
	if [ -n "$name" ] && [ "$name" != "${name//simple_adblock}" ]; then
		uci -q del "firewall.$1"
	fi
}

fw3_setup() {
	config_load "firewall"
	config_foreach remove_fw3_redirect "redirect"
	if [ "$1" = "start" ]; then
		uci -q add firewall redirect >/dev/null 2>&1
		uci -q set firewall.@redirect[-1].name="simple_adblock_dns_hijack"
		uci -q set firewall.@redirect[-1].target="DNAT"
		uci -q set firewall.@redirect[-1].src="lan"
		uci -q set firewall.@redirect[-1].proto="tcpudp"
		uci -q set firewall.@redirect[-1].src_dport="53"
		uci -q set firewall.@redirect[-1].dest_port="53"
		uci -q set firewall.@redirect[-1].dest_ip="$ip"
		uci -q set firewall.@redirect[-1].reflection="0"
	fi
	if [ -n "$(uci changes firewall)" ]; then
		uci -q commit firewall
		/etc/init.d/firewall restart >/dev/null 2>&1
	fi
}

process_url() {
	local label type D_TMP R_TMP
	if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then return 1; fi
	label="${1##*//}"; label="${label%%/*}";
	if [ "$2" = "hosts" ]; then
		label="Hosts: $label"; filter="$h_filter";
	else
		label="Domains: $label"; filter="$d_filter";
	fi
	if [ "$3" = "blocked" ]; then
		type="Blocked"; D_TMP="$B_TMP";
	else
		type="Allowed"; D_TMP="$A_TMP";
	fi
	while [ -z "$R_TMP" ] || [ -e "$R_TMP" ]; do
		R_TMP="$(mktemp -u -q -t ${packageName}_tmp.XXXXXXXX)"
	done
	if ! $dl_command "$1" $dl_flag "$R_TMP" 2>/dev/null || [ ! -s "$R_TMP" ]; then
		output 2 "[DL] $type $label $__FAIL__\\n"
		output 1 "$_FAIL_"
#		tmpfs add message "-"
		dlStatus="${dlStatus}-"
		tmpfs add error "Error downloading ${1}."
		return 0
	fi
	sed -i "$filter" "$R_TMP"
	cat "${R_TMP}" >> "$D_TMP"
	rm -f "${R_TMP}" >/dev/null 2>/dev/null
	output 2 "[DL] $type $label $__OK__\\n"
	output 1 "$_OK_"
#	tmpfs add message "+"
	dlStatus="${dlStatus}+"
	return 0
}

download_lists() {
	local i hf w_filter j=0 R_TMP

	tmpfs set message "${statusDownloading}..."
	for i in $A_TMP $B_TMP $cacheFile $dnsmasqFile; do [ -f $i ] && rm -f $i; done
	if [ "$(awk '/^MemFree/ {print int($2/1000)}' "/proc/meminfo")" -lt 32 ]; then
		output 3 "Low free memory, restarting dnsmasq..."
		if reload_dnsmasq "quiet"; then output_okn; else output_failn; fi
	fi
	touch $A_TMP; touch $B_TMP;
	output 1 "Downloading lists "
	unset dlStatus
	if [ -n "$blacklist_hosts_urls" ]; then
		for hf in ${blacklist_hosts_urls}; do
			if [ "$parallelDL" -gt 0 ]; then
				process_url "$hf" "hosts" "blocked" &
			else
				process_url "$hf" "hosts" "blocked"
			fi
		done
	fi
	if [ -n "$blacklist_domains_urls" ]; then
		for hf in ${blacklist_domains_urls}; do
			if [ "$parallelDL" -gt 0 ]; then
				process_url "$hf" "domains" "blocked" &
			else
				process_url "$hf" "domains" "blocked"
			fi
		done
	fi
	if [ -n "$whitelist_domains_urls" ]; then
		for hf in ${whitelist_domains_urls}; do
			if [ "$parallelDL" -gt 0 ]; then
				process_url "$hf" "domains" "allowed" &
			else
				process_url "$hf" "domains" "allowed"
			fi
		done
	fi
	wait
	dlStatus="${dlStatus//-/$xmark}"
	dlStatus="${dlStatus//+/$checkmark}"
	[ "$verbosity" = "1" ] && logmsg="${logmsg}${dlStatus}"
	output 1 "\\n"

	[ -n "$blacklist_domains" ] && for hf in ${blacklist_domains}; do echo "$hf" | sed "$d_filter" >> $B_TMP; done
	whitelist_domains="${whitelist_domains}
$(cat $A_TMP)"
	[ -n "$whitelist_domains" ] && for hf in ${whitelist_domains}; do hf=$(echo "$hf" | sed 's/\./\\./g'); w_filter="$w_filter/^${hf}$/d;/\\.${hf}$/d;"; done
	if [ -s $B_TMP ]; then
		output 1 "Processing downloads "
		output 2 "Sorting combined list "
		tmpfs set message "$statusProcessing: sorting combined list"
		if sort $B_TMP | uniq > $A_TMP; then
			output_ok
		else
			output_fail
			tmpfs add error "Sorting error."
		fi

# TLD optimization written by Dirk Brenken (dev@brenken.org)
		output 2 "Optimizing combined list "
		tmpfs set message "$statusProcessing: optimizing combined list"
		if awk -F "." '{for(f=NF;f>1;f--)printf "%s.",$f;print $1}' "$A_TMP" > "$B_TMP"; then
			if sort "$B_TMP" > "$A_TMP"; then
				if awk '{if(NR==1){tld=$NF};while(getline){if($NF!~tld"\\."){print tld;tld=$NF}}print tld}' "$A_TMP" > "$B_TMP"; then
					if awk -F "." '{for(f=NF;f>1;f--)printf "%s.",$f;print $1}' "$B_TMP" > "$A_TMP"; then
						if sort "$A_TMP" | uniq > "$B_TMP"; then
							output_ok
						else
							output_fail
							tmpfs add error "Data file optimization error."
							mv $A_TMP $B_TMP
						fi
					else
						output_fail
						tmpfs add error "Data file optimization error."
					fi
				else
					output_fail
					tmpfs add error "Data file optimization error."
					mv $A_TMP $B_TMP
				fi
			else
				output_fail
				tmpfs add error "Data file optimization error."
			fi
		else
			output_fail
			tmpfs add error "Data file optimization error."
			mv $A_TMP $B_TMP
		fi

		output 2 "Whitelisting domains "
		tmpfs set message "$statusProcessing: whitelisting domains"
		if sed -i "$w_filter" $B_TMP; then
			output_ok
		else
			output_fail
			tmpfs add error "Whitelist processing error."
		fi
		output 2 "Formatting merged file "
		tmpfs set message "$statusProcessing: formatting merged file"
		if [ "$allowNonAscii" -gt 0 ]; then
			if sed "$f_filter" $B_TMP > $A_TMP; then
				output_ok
			else
				output_fail
				tmpfs add error "Data file formatting error."
			fi
		else
			if sed "$f_filter" $B_TMP | grep -E -v '[^a-zA-Z0-9=/.-]' > $A_TMP; then
				output_ok
			else
				output_fail
				tmpfs add error "Data file formatting error."
			fi
		fi

		output 2 "Creating DNSMASQ config "
		tmpfs set message "$statusProcessing: creating DNSMASQ blocklist"
		if mv $A_TMP $dnsmasqFile; then
			output_ok
		else
			output_fail
			tmpfs add error "Error moving data file ${A_TMP} to ${dnsmasqFile}."
		fi

		if [ "$compressedCache" -gt 0 ]; then
			output 2 "Creating compressed cache "
			tmpfs set message "$statusProcessing: creating compressed cache"
			R_TMP="$(mktemp -u -q -t ${packageName}_tmp.XXXXXXXX)"
			if gzip < "$dnsmasqFile" > "$R_TMP"; then
				mv "$R_TMP" "$compressedCacheFile"
				output_ok
			else
				output_fail
				rm -f "$R_TMP"
				tmpfs add error "Error creating compressed cache."
			fi
		else
			rm -f "$compressedCacheFile" >/dev/null 2>&1
		fi

		output 2 "Removing temporary files "
		tmpfs set message "$statusProcessing: removing temporary files"
		rm -f "/tmp/${packageName}_tmp.*" >/dev/null 2>&1
		for i in $A_TMP $B_TMP $cacheFile; do if [ -s $i ]; then rm -f $i || j=1; fi; done
		if [ $j -eq 0 ]; then
			output_ok
		else
			output_fail
			tmpfs add error "Error removing temporary files."
		fi
		output 1 "\\n"
	fi
}

start_service() {
	is_enabled "on_start" || return 1
	local ip status error action="$(tmpfs get triggers)"
	if create_lock; then
		tmpfs set triggers
		procd_open_instance "main"
		procd_set_param command /bin/true
		procd_set_param stdout 1
		procd_set_param stderr 1
		network_get_ipaddr ip "lan"
		if [ "$forceDNS" -ne 0 ] && [ -n "$ip" ]; then
			if is_chaos_calmer; then
				fw3_setup "start"
			else
				procd_open_data
				json_add_array firewall
				json_add_object ""
				json_add_string type redirect
				json_add_string target "DNAT"
				json_add_string src "lan"
				json_add_string dest "lan"
				json_add_string proto "tcpudp"
				json_add_string src_dport "53"
				json_add_string dest_port "53"
				json_add_string dest_ip "$ip"
				json_add_string name "simple-adblock-dns-hijack"
				json_add_string reflection "0"
				json_close_object
				json_close_array
				procd_close_data
			fi
		fi
		procd_close_instance
		status="$(tmpfs get status)"
		error="$(tmpfs get error)"
		tmpfs del status
		tmpfs del message
		tmpfs del error
		tmpfs del stats

		case "$1" in
			download) action="download";;
			restart|*)
				if [ ! -s "$dnsmasqFile" ] && [ ! -s "$cacheFile" ] && ! testCompressedCache; then
					action="download"
				fi
				if [ -n "$error" ]; then 
					action="download"
				fi
				action="${action:-$1}"
			;;
		esac

		case $action in
			download)
				if [ -s "$dnsmasqFile" ] || [ -s "$cacheFile" ] || testCompressedCache; then
					output "Force-reloading $serviceName...\\n"
					tmpfs set status "$statusForceReloading"
				else
					output "Starting $serviceName...\\n"
					tmpfs set status "$statusStarting"
				fi
				download_lists
				reload_dnsmasq "on_start"
			;;
			restart|*)
				if [ "$action" == "restart" ]; then
					output "Retarting $serviceName...\\n"
					tmpfs set status "$statusRestarting"
				else
					output "Starting $serviceName...\\n"
					tmpfs set status "$statusStarting"
				fi
				if testCompressedCache && [ ! -s "$cacheFile" ] && [ ! -s "$dnsmasqFile" ]; then
					output 3 "Found compressed cache file, unpacking it "
					tmpfs set message "found compressed cache file, unpacking it."
					if gzip -dc < "${compressedCacheFile}" > "$cacheFile"; then
						output_okn
					else
						output_failn
						output "$_ERROR_: $serviceName failed to unpack compressed cache!\\n"
						tmpfs add error "failed to unpack compressed cache!"
						return 1
					fi
				fi
				if [ -s "$cacheFile" ] &&  [ ! -s "$dnsmasqFile" ]; then
					output 3 "Found cache file, reusing it "
					tmpfs set message "found cache file, reusing it."
					if mv "$cacheFile" "$dnsmasqFile"; then 
						output_okn
					else 
						output_failn
						tmpfs add error "Error moving $cacheFile to $dnsmasqFile."
					fi
				fi
				reload_dnsmasq "on_start"
			;;
		esac

		if [ -s "$dnsmasqFile" ] && [ "$(tmpfs get status)" != "$statusFail" ]; then
			output "$serviceName is blocking $(wc -l < $dnsmasqFile) domains "; output_okn;
			tmpfs del message
			tmpfs set status "$statusSuccess: $(wc -l < $dnsmasqFile) domains blocked."
			if [ -n "$(tmpfs get error)" ]; then
				output "$_ERROR_: $(tmpfs get error)\\n"
			fi
		else
			tmpfs set status "$statusFail"
			tmpfs add error "Failed to create DNSMASQ blocklist."
		fi
		remove_lock
	else
		output "$serviceName: another instance is starting up "; output_failn;
		return 1
	fi
}

service_started() { procd_set_config_changed firewall; }
service_stopped() { procd_set_config_changed firewall; }
restart_service() { rc_procd stop_service "restart"; rc_procd start_service "restart"; }
reload_service() { restart_service; }
restart() { restart_service; }
reload() { restart_service; }
dl() { rc_procd stop_service "restart"; rc_procd start_service "download"; }
killcache() { [ -s $cacheFile ] && rm -f $cacheFile >/dev/null 2>/dev/null; [ -s $compressedCacheFile ] && rm -f $compressedCacheFile >/dev/null 2>/dev/null; }
status() {
	local status
	if [ -n "$(tmpfs get status)" ]; then 
		status="$(tmpfs get status)"
	fi
	if [ -n "$status" ] && [ -n "$(tmpfs get message)" ]; then 
		status="${status}: $(tmpfs get message)"
	fi
	[ -n "$status" ] && output "$serviceName $status\\n"
	[ -n "$(tmpfs get error)" ] && output "$_ERROR_: $(tmpfs get error)\\n"
}

stop_service() {
	load_package_config
	if [ "$serviceEnabled" -gt 0 ]; then
		if [ -z "$1" ] && [ -s "$dnsmasqFile" ]; then
			[ -s "$dnsmasqFile" ] && mv "$dnsmasqFile" "$cacheFile" >/dev/null 2>/dev/null
			output "Stopping $serviceName...\\n"
			tmpfs del triggers
			reload_dnsmasq "on_stop"
		fi
	else
		[ -s "$dnsmasqFile" ] && mv "$dnsmasqFile" "$cacheFile" >/dev/null 2>/dev/null
		reload_dnsmasq "quiet"
	fi
	if is_chaos_calmer; then
		fw3_setup "stop"
	fi
}

check() {
	load_package_config
	local string="$1"
	if [ ! -f "$dnsmasqFile" ]; then
		echo "No local blacklist ($dnsmasqFile) found."
	elif [ -z "$string" ]; then
		echo "Usage: /etc/init.d/${packageName} check domain"
	elif grep -m1 -q "$string" "$dnsmasqFile"; then
		echo "Found $(grep -c "$string" "$dnsmasqFile") matches for $string in $dnsmasqFile:"
		grep "$string" "$dnsmasqFile" | sed 's|local=/||;s|/$||;'
	else
		echo "The $string is not found in current blacklist."
	fi
}
